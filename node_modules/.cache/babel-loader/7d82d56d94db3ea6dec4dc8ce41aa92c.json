{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\workspace\\\\05-RCJS-EVNG\\\\React-JS\\\\React-JS-Core-module\\\\first-app\\\\src\\\\components\\\\ContactList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport * as contactActions from '../redux/contact-app/contact-app.actions';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Spinner from \"./layout/Spinner\";\n\nlet ContactList = () => {\n  _s();\n\n  let dispatch = useDispatch();\n  let contactState = useSelector(state => {\n    return state.contact;\n  });\n  let {\n    contacts,\n    loading,\n    errorMessage\n  } = contactState;\n  useEffect(() => {\n    dispatch(contactActions.fetchContacts());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 27\n    }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-hover text-center table-striped\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"bg-primary text-white\",\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"SNO\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 33,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"NAME\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 34,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 35,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Phone\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Location\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: contacts.length > 0 && contacts.map(contact => {\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                onClick: selectContact.bind(this, contact),\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: contact.login.uuid.substr(contact.login.uuid.length - 5)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 46,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [contact.name.first, \" \", contact.name.last]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 47,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: contact.email\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 48,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: contact.phone\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 49,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: contact.location.city\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 50,\n                  columnNumber: 49\n                }, this)]\n              }, contact.login.uuid, true, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 45\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ContactList, \"wT6Iy301jaQqiCHGMMrr6bhGI34=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ContactList;\nexport default ContactList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"sources":["D:/workspace/05-RCJS-EVNG/React-JS/React-JS-Core-module/first-app/src/components/ContactList.tsx"],"names":["React","useEffect","contactActions","useDispatch","useSelector","Spinner","ContactList","dispatch","contactState","state","contact","contacts","loading","errorMessage","fetchContacts","length","map","selectContact","bind","login","uuid","substr","name","first","last","email","phone","location","city"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,KAAKC,cAAZ,MAAgC,0CAAhC;AAEA,SAAQC,WAAR,EAAoBC,WAApB,QAAsC,aAAtC;AACA,OAAOC,OAAP,MAAoB,kBAApB;;AAOA,IAAIC,WAA4B,GAAE,MAAK;AAAA;;AACnC,MAAIC,QAAQ,GAACJ,WAAW,EAAxB;AAEA,MAAIK,YAAwC,GAACJ,WAAW,CAAEK,KAAD,IAA+C;AACpG,WAAOA,KAAK,CAACC,OAAb;AACH,GAFuD,CAAxD;AAIJ,MAAG;AAACC,IAAAA,QAAD;AAAUC,IAAAA,OAAV;AAAkBC,IAAAA;AAAlB,MAAgCL,YAAnC;AAEIP,EAAAA,SAAS,CAAC,MAAI;AACVM,IAAAA,QAAQ,CAACL,cAAc,CAACY,aAAf,EAAD,CAAR;AACH,GAFQ,EAEP,EAFO,CAAT;AAGA,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,cAEQF,OAAO,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAH,gBACH,QAAC,KAAD,CAAO,QAAP;AAAA,6BACI,QAAC,KAAD,CAAO,QAAP;AAAA,+BACI;AAAO,UAAA,SAAS,EAAC,6CAAjB;AAAA,kCACI;AAAO,YAAA,SAAS,EAAC,uBAAjB;AAAA,mCACA;AAAA,sCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAUI;AAAA,sBAEID,QAAQ,CAACI,MAAT,GAAkB,CAAlB,IACAJ,QAAQ,CAACK,GAAT,CAAaN,OAAO,IAAI;AACpB,kCACI;AAA4B,gBAAA,OAAO,EAAEO,aAAa,CAACC,IAAd,CAAmB,IAAnB,EAAyBR,OAAzB,CAArC;AAAA,wCACI;AAAA,4BAAKA,OAAO,CAACS,KAAR,CAAcC,IAAd,CAAmBC,MAAnB,CAA0BX,OAAO,CAACS,KAAR,CAAcC,IAAd,CAAmBL,MAAnB,GAA4B,CAAtD;AAAL;AAAA;AAAA;AAAA;AAAA,wBADJ,eAEI;AAAA,6BAAKL,OAAO,CAACY,IAAR,CAAaC,KAAlB,OAA0Bb,OAAO,CAACY,IAAR,CAAaE,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFJ,eAGI;AAAA,4BAAKd,OAAO,CAACe;AAAb;AAAA;AAAA;AAAA;AAAA,wBAHJ,eAII;AAAA,4BAAKf,OAAO,CAACgB;AAAb;AAAA;AAAA;AAAA;AAAA,wBAJJ,eAKI;AAAA,4BAAKhB,OAAO,CAACiB,QAAR,CAAiBC;AAAtB;AAAA;AAAA;AAAA;AAAA,wBALJ;AAAA,iBAASlB,OAAO,CAACS,KAAR,CAAcC,IAAvB;AAAA;AAAA;AAAA;AAAA,sBADJ;AASH,aAVD;AAHJ;AAAA;AAAA;AAAA;AAAA,kBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAHZ;AAAA;AAAA;AAAA;AAAA,UADJ;AAwCH,CApDD;;GAAId,W;UACaH,W,EAEgCC,W;;;KAH7CE,W;AAqDJ,eAAeA,WAAf","sourcesContent":["import React, {useEffect} from \"react\";\r\nimport * as contactActions from '../redux/contact-app/contact-app.actions';\r\nimport * as contactReducer from '../redux/contact-app/contact-app.reducer';\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\nimport Spinner from \"./layout/Spinner\";\r\n\r\ninterface IProps {}\r\ninterface IState {\r\n\r\n}\r\n\r\nlet ContactList:React.FC<IProps> =() =>{\r\n    let dispatch=useDispatch();\r\n\r\n    let contactState:contactReducer.ContactState=useSelector((state:{contact:contactReducer.ContactState})=>{\r\n        return state.contact;\r\n    });\r\n    \r\nlet{contacts,loading,errorMessage}=contactState;\r\n\r\n    useEffect(()=>{\r\n        dispatch(contactActions.fetchContacts());\r\n    },[]);\r\n    return(\r\n        <React.Fragment>\r\n            {\r\n                loading ? <Spinner/>:\r\n                    <React.Fragment>\r\n                        <React.Fragment>\r\n                            <table className=\"table table-hover text-center table-striped\">\r\n                                <thead className=\"bg-primary text-white\">\r\n                                <tr>\r\n                                    <th>SNO</th>\r\n                                    <th>NAME</th>\r\n                                    <th>Email</th>\r\n                                    <th>Phone</th>\r\n                                    <th>Location</th>\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {\r\n                                    contacts.length > 0 &&\r\n                                    contacts.map(contact => {\r\n                                        return (\r\n                                            <tr key={contact.login.uuid}onClick={selectContact.bind(this, contact)} >\r\n                                                <td>{contact.login.uuid.substr(contact.login.uuid.length - 5)}</td>\r\n                                                <td>{contact.name.first} {contact.name.last}</td>\r\n                                                <td>{contact.email}</td>\r\n                                                <td>{contact.phone}</td>\r\n                                                <td>{contact.location.city}</td>\r\n                                            </tr>\r\n                                        )\r\n                                    })\r\n                                }\r\n                                </tbody>\r\n                            </table>\r\n                        </React.Fragment>\r\n                    </React.Fragment>\r\n            }\r\n\r\n\r\n        </React.Fragment>\r\n    )\r\n};\r\nexport default ContactList;\r\n"]},"metadata":{},"sourceType":"module"}